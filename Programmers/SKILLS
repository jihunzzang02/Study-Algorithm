## round 함수
반올림할때 씀, 소수 몇째자리 수까지 표현~
print( round(123.456,2))
>>123.45
#################################################################################

x.isalpha() 알파벳인지 아닌지 True False 반환
/  나누기 결과값 실수형 반환
// 나누고 몫을 반환
%  나누고 나머지 반환
** 거듭제곱 연산
#################################################################################

#순열 조합
from itertools import permutations
from itertools import combinations
item = ['a','b','c']
list(combinations(item,2))
>>>[('a', 'b'), ('a', 'c'), ('b', 'c')]
list(map(''.join, permutations(item,2)))
>>> ['ab', 'ac', 'ba', 'bc', 'ca', 'cb']
list(map(''.join, combinations(item,2)))
>>> ['ab', 'ac', 'bc']
#################################################################################

## Counter사용방법 
## 컨테이너에 동일한 값의 자료가 몇개인지를 파악하는데 사용하는 객체
from collections import Counter
lst = ['aa', 'cc', 'dd', 'aa', 'bb', 'ee']
print(Counter(lst))
>>>Counter({'aa': 2, 'cc': 1, 'dd': 1, 'bb': 1, 'ee': 1})

Counter(lst).most_common()
>>> [('aa', 2), ('cc', 1), ('dd', 1), ('bb', 1), ('ee', 1)]
하면 정렬된 채로 나옴

Counter(lst).most_common(n=2)
>>>[('aa', 2), ('cc', 1)]
하면 정렬된 채로 2개만 나옴

차집합구할때 
##  Counter(participant) - Counter(completion) 위와 같이 빼기도 가능

from collections import Counter
lst1 = ['a','b','c','a','c','f','g']
tup1 = ('b','d','e','e','f','f','g','h','h')
ct1 = Counter(lst1)
ct2 = Counter(tup1)
print(ct1)
>>> Counter({'a': 2, 'b': 1, 'c': 2, 'f': 1, 'g': 1})
print(ct2)
>>> Counter({'b': 1, 'd': 1, 'e': 2, 'f': 2, 'g': 1, 'h': 2})
list(ct1.elements())
>>> ['a', 'a', 'b', 'c', 'c', 'f', 'g']
list(ct2.elements())
>>> ['b', 'd', 'e', 'e', 'f', 'f', 'g', 'h', 'h']
ct1+ct2
>>> Counter({'a': 2, 'b': 2, 'c': 2, 'f': 3, 'g': 2, 'd': 1, 'e': 2, 'h': 2})
차집합 ct1-ct2
>>> Counter({'a': 2, 'c': 2})
교집합 ct1&ct2 
>>> Counter({'b': 1, 'f': 1, 'g': 1})
합집합 ct1|ct2
>>>Counter({'a': 2, 'b': 1, 'c': 2, 'f': 2, 'g': 1, 'd': 1, 'e': 2, 'h': 2})
list((ct1|ct2).elements())
>>> ['a', 'a', 'b', 'c', 'c', 'f', 'f', 'g', 'd', 'e', 'e', 'h', 'h']
#################################################################################


#리스트 컴프리헨션
x = [i for i in range(10)]
>>> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
x = [i for i in range(10) if i%2 ==1]
>>> [1, 3, 5, 7, 9]
x = [i*i for i in range(1,10)]
>>> [1, 4, 9, 16, 25, 36, 49, 64, 81]
n*m행렬 만들기 x = [[0]*m for _ in range(n)]
x = [[0]*4 for _ in range(3)]
>>>[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
#################################################################################


## defaultdict 사용법
from collections import defaultdict
temp = defaultdict(int)
하면 디폴트값이 int인 딕셔너리 생성
temp['x'] 선언할 시
자동으로 0이 지정됨
{'x' : 0} 

temp = defaultdict(list)
temp = defaultdict(set)
모두 사용가능

# 예시
letters = 'dongdongfather'
letters_dict = defaultdict(int)
for k in letters:
    letters_dict[k]+=1

letters_dict = {'d':2, 'o':2, 'n':2 ....... 이런식으로 나옴
#################################################################################




## hash() 함수방법
hash('123')
>>> 1710988942867749935
#################################################################################


## zip사용방법
>>> numbers = (1, 2, 3)
>>> letters = ("A", "B", "C")
>>> pairs = list(zip(numbers, letters))
>>> pairs
[(1, 'A'), (2, 'B'), (3, 'C')]

>>> keys = [1, 2, 3]
>>> values = ["A", "B", "C"]
>>> dict(zip(keys, values))
{1: 'A', 2: 'B', 3: 'C'}

>>> dict(zip(["year", "month", "date"], [2001, 1, 31]))
{'year': 2001, 'month': 1, 'date': 31}

>>> numbers = ["1", "2", "3"]
>>> letters = ["A"]
>>> list(zip(numbers, letters))
[('1', 'A')]
#################################################################################


## bisect  정렬된 순서를 유지하면서 리스트에 x를 삽입할 인덱스 반환
bisect_lect(배열명,원소) >>> 삽입할 가장 왼쪽 인덱스 반환
bisect_right(배열명,원소) >>> 삽입할 가장 오른쪽 인덱스 반환

from bisect import bisect_left, bisect_right
a= [1,2,4,4,8]
x=4
print(bisect_left(a,x))    >>>  2
print(bisect_right(a,x))   >>>  4
#################################################################################



## 아스키코드 변환
문자를 아스키코드로
ord('A')  >>>  65
ord('Z')  >>>  91

아스키코드를 문자로
chr(65)   >>> 'A'
#################################################################################


## 숫자만 찾기
import re
s = "{{2},{2,1},{2,1,3},{2,1,3,4}dfsgdsfgfwaef1244}"
re.findall('\d+',s)
>>> ['2', '2', '1', '2', '1', '3', '2', '1', '3', '4', '1244']
re.findall('\d',s)
>>> ['2', '2', '1', '2', '1', '3', '2', '1', '3', '4', '1', '2', '4', '4']
특정 문자만 찾기( +,*,-만 찾기)
re.sub('[^+-*],'','구0ㄹ1380ㄱ+*$*@_!-')
>>>+**-


****
| : 다자택일
re.findall('one|two|three', 'one four two three zero')
>>> ['one', 'two', 'three']
re.findall('one|oneself|onerous', 'oneself is the one thing.')
>>> ['one', 'one']
‘oneself’가 있음에도 oneself에 일치되지 않았다. 그 이유는 이미 ‘one’을 찾아버렸고, 정규식은 overlapping된 부분을 또 찾지 않기 때문
당연하게도 더 긴 oneself를 one 앞에다 두면 해결된다.
아니면 단어 경계를 활용한다. \bone\b|\boneself\b로 쓰면 된다.

* : 0회 이상 반복
a*의 경우 ‘a’나 ‘aaa’ 혹은 ‘‘(빈 문자열)과도 일치
re.findall('a*', 'aaavdfbaaa aad ')
>>> ['aaa', '', '', '', '', 'aaa', '', 'aa', '', '', '']

+ : 1회 이상 반복
*과 비슷하지만 무조건 한 번이라도 등장해야 한다
re.findall('a+', 'aaabaaa aa  ')
>>> ['aaa', 'aaa', 'aa']

{n} : 정확히 n회만큼 반복
{n, m} : n회 이상 m회 이하 반복
{n, } : n회 이상 반복. 무한히 일치될 수 있다.
print(re.findall('a{3}', 'aaaaaaaa'))
print(re.findall('a{2,4}', 'a aa aaa aaaa aaaaa'))
print(re.findall('a{2,}', 'a aa aaa aaaa aaaaa'))
['aaa', 'aaa']
['aa', 'aaa', 'aaaa', 'aaaa']
['aa', 'aaa', 'aaaa', 'aaaaa']

? : 0회 또는 1회 반복
re.findall('ab?a', 'aa aba aaaa')
>>> ['aa', 'aba', 'aa', 'aa']



import re 정리
[] : 대괄호 속 여러 문자 중 하나와 일치하면 댐
하이픈 -는 범위를 형성 [a-z]는 알파벳 소문자 중 하나이기만 하면 매칭 [가-힣]는 한글 한 글자에 일치
[A-z]는 영문 대소문자와 몇 개의 특수문자를 포함. 영문자는 [A-Za-z]와 같이 쓰기를 권장
대괄호 안에서는 메타문자 역할을 하는 것은 오직 \, ^, -, ] 4개뿐 ., *, + 등은 대괄호 안에서는 그냥 문자 ‘.’, ‘*’, ‘+’ 하나에 매칭
캐릿(caret)^ 문자가 여는 대괄호 바로 뒤에 있으면 문자가 반전
[^0-9]는 숫자를 제외한 문자 하나에 일치
[z-a]와 같이 거꾸로 쓰는 것은 불가능

. : 모든 문자와 일치
re.findall('r..n.', 'ryan. ruin rain round. reign rqin')
>>> ['ryan.', 'ruin ', 'rain ', 'round']
re.findall('r..n[.]', 'ryan. ruin rain round. reign rqin')
>>> ['ryan.']
[ ] 안에서는 .가 메타문자로 동작하지 않는다. 리얼 마침표를 찾고싶으면 [.]으로
re.findall('r..n[.].', 'ryan. ruin rain round. reign rqin')
>>> ['ryan. ']


\w \W, \d \D, \s \S, \b \B
\w(소문자)는 단어 문자 1개와 일치. 단어 문자는 영문 대소문자, 숫자 0-9, 언더바 ‘_’ 를 포함
\W(대문자)는 단어 문자 이외의 문자 1개에 일치. 즉 공백 문자, 특수 문자 등에 일치
re.findall('\w\W\w', 'a (9_a a')
>>> ['a a']

\d는 숫자 문자 1개에 일치
\D는 비 숫자 문자 1개에 일치
re.findall('\d\d\D\D', '11aa11c1')
>>> ['11aa']

\s는 공백 문자(빈칸 ‘ ‘, 탭 ‘\t’, 개행 ‘\n’) 1개에 일치
\S는 \s의 반대 역할이다. 즉, 공백 문자 이외의 모든 문자 1개에 일치
re.findall('Oh\smy\sgod\s\S','aaaaOh my\tgod !aaa')
>>> ['Oh my\tgod !']


import re 사용법
1. re.match(패턴, 패턴찾을 string)
얘는 무조건 패턴이 string의 처음부터 나오는지를 찾음. 맨앞에 패턴이 있는가? 있으면 span에 인덱스 보여줌
print(re.match('123n','drvbh  ero 123nkwf'))
>>>None
print(re.match('123n','123ndrvbh  ero 123nkwf'))
>>> <re.Match object; span=(0, 4), match='123n'>
print(re.match('123n','123ndrvbh  ero 123nkwf').span())
(0, 4)

2. re.search(패턴, 패턴찾을 string)
얘는 패턴이 중간에 있어도 찾아줌
print(re.search('123n','drvbh  ero 123nkwf'))
>>> <re.Match object; span=(11, 15), match='123n'>
print(re.search('123n','drvbh  ero 123nkwf').span())
>>> (11, 15)

3. re.findall(패턴, 패턴찾을 string)
얘는 찾은 것들을 반환해주는데 오버래핑 되지않음, 반환된 리스트는 서로 겹치지 않음
re.findall('123n','drvbh  ero 123nkwf')
>>> ['123n']
re.findall('123n','dr123nvbh  ero 123nkwf')
>>> ['123n', '123n']
re.findall('aa','aaaa')
>>> ['aa', 'aa']
re.findall('aa','aaa')
>>> ['aa']

4. finditer
list(re.finditer('123n','dr123nvbh  ero 123nkwf'))
>>> [<re.Match object; span=(2, 6), match='123n'>, <re.Match object; span=(15, 19), match='123n'>]

x = re.search('match', "qmatchObj' is a good name, but 'm' is convenient.")
print(x)
print(x.group())
print(x.start())
print(x.end())
print(x.span())

<_sre.SRE_Match object; span=(1, 6), match='match'>
match
1
6
(1, 6)


#################################################################################
import heapq

## 힙 생성
temp_heap = []

## 힙 원소추가
heapq.heappush(temp_heap, 4)

## 힙 원소삭제
## heappop이용 시, 가장 작은 원소를 삭제 후 그 값을 리턴
heapq.heappop(temp_heap)

## 최소(최대)값을 삭제하지 않고 얻기
temp_heap[0]

## 기존 리스트를 힙으로 변환
temp_heap = [4, 1, 7, 3, 8, 5]
heapq.heapify(temp_heap)

## heapq는 최소 힙(최소값이 부모노드)기능만 작동하기에 최대 힙(최대값이 부모노드)로 하기위해선
## heappush할 때 튜플의 형태 (우선 순위, 값)으로 삽입/삭제 가능.
import heapq
nums = [4, 1, 7, 3, 8, 5]
heap = []
for num in nums:
  heapq.heappush(heap, (-num, num))
  
## 힙을 이용한 힙정렬
import heapq
def heap_sort(nums):
    heap = []
    for num in nums:
        heapq.heappush(heap, num)
    sorted_nums = []
    while heap:
        sorted_nums.append(heapq.heappop(heap))
    return sorted_nums
print(heap_sort([4, 1, 7, 3, 8, 5]))
>>> [(-8, 8), (-7, 7), (-5, 5), (-1, 1), (-3, 3), (-4, 4)]


