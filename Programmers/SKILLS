## Counter사용방법 
## 컨테이너에 동일한 값의 자료가 몇개인지를 파악하는데 사용하는 객체
from collections
lst = ['aa', 'cc', 'dd', 'aa', 'bb', 'ee']
print(collections.Counter(lst))
'''
결과
Counter({'aa': 2, 'cc': 1, 'dd': 1, 'bb': 1, 'ee': 1})
'''
collections.Counter(lst).most_commons()
하면 정렬된 채로 나옴
##  collections.Counter(participant) - collections.Counter(completion) 위와 같이 빼기도 가능




## defaultdict 사용법
from collections import defaultdict
temp = defaultdic(int)
하면 디폴트값이 int인 딕셔너리 생성
temp['x'] 선언할 시
자동으로 0이 지정됨
{'x' : 0}

temp = defaultdic(list)
temp = defaultdic(set)
모두 사용가능

# 예시
letters = 'dongdongfather'
letters_dict = defaultdict(int)
for k in letters:
    letters_dict[k]+=1

letters_dict = {'d':2, 'o':2, 'n':2 ....... 이런식으로 나옴





## hash() 함수방법
hash('123')
>>> 1710988942867749935


## zip사용방법
>>> numbers = (1, 2, 3)
>>> letters = ("A", "B", "C")
>>> pairs = list(zip(numbers, letters))
>>> pairs
[(1, 'A'), (2, 'B'), (3, 'C')]

>>> keys = [1, 2, 3]
>>> values = ["A", "B", "C"]
>>> dict(zip(keys, values))
{1: 'A', 2: 'B', 3: 'C'}

>>> dict(zip(["year", "month", "date"], [2001, 1, 31]))
{'year': 2001, 'month': 1, 'date': 31}

>>> numbers = ["1", "2", "3"]
>>> letters = ["A"]
>>> list(zip(numbers, letters))
[('1', 'A')]



## bisect  정렬된 순서를 유지하면서 리스트에 x를 삽입할 인덱스 반환
bisect_lect(배열명,원소) >>> 삽입할 가장 왼쪽 인덱스 반환
bisect_right(배열명,원소) >>> 삽입할 가장 오른쪽 인덱스 반환

from bisect import bisect_left, bisect_right
a= [1,2,4,4,8]
x=4
print(bisect_left(a,x))    >>>  2
print(bisect_right(a,x))   >>>  4




## 아스키코드 변환
문자를 아스키코드로
ord('A')  >>>  65
ord('Z')  >>>  91

아스키코드를 문자로
chr(65)   >>> 'A'



## 숫자만 찾기
import re
s = "{{2},{2,1},{2,1,3},{2,1,3,4}dfsgdsfgfwaef1244}"
re.findall('\d+',s)
>>> ['2', '2', '1', '2', '1', '3', '2', '1', '3', '4', '1244']
