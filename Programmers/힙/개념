import heapq


## 힙 생성
temp_heap = []


## 힙 원소추가
heapq.heappush(temp_heap, 4)


## 힙 원소삭제
## heappop이용 시, 가장 작은 원소를 삭제 후 그 값을 리턴
heapq.heappop(temp_heap)


## 최소(최대)값을 삭제하지 않고 얻기
temp_heap[0]


## 기존 리스트를 힙으로 변환
temp_heap = [4, 1, 7, 3, 8, 5]
heapq.heapify(temp_heap)


## heapq는 최소 힙(최소값이 부모노드)기능만 작동하기에 최대 힙(최대값이 부모노드)로 하기위해선
## heappush할 때 튜플의 형태 (우선 순위, 값)으로 삽입/삭제 가능.
import heapq
nums = [4, 1, 7, 3, 8, 5]
heap = []
for num in nums:
  heapq.heappush(heap, (-num, num))
  
  
## 힙을 이용한 힙정렬
import heapq
def heap_sort(nums):
  heap = []
  for num in nums:
    heapq.heappush(heap, num)
  sorted_nums = []
  while heap:
    sorted_nums.append(heapq.heappop(heap))
  return sorted_nums
print(heap_sort([4, 1, 7, 3, 8, 5]))
